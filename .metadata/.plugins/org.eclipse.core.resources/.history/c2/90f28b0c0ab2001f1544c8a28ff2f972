package ServiceImpl;

import java.io.IOException;
import java.util.List;

import org.apache.commons.beanutils.BeanUtils;

import dao.UserDAOadmin;
import entily.User;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@WebServlet({"/user", "/user/index", "/user/delete", "/user/create", "/user/update", "/user/edit/*", "/user/search"})
public class UserServletadmin extends HttpServlet {
    private UserDAOadmin dao = new UserDAOadmin(); // DAO để làm việc với database

    @Override
    protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        String uri = req.getRequestURI(); // Lấy URI để phân biệt yêu cầu
        User user = new User();
        String message = null;

        try {
            if (uri.contains("edit")) { // Xử lý chỉnh sửa người dùng
                String idStr = uri.substring(uri.lastIndexOf("/") + 1);
                Integer id = Integer.parseInt(idStr);
                user = dao.findById(id); // Tìm người dùng theo ID
                if (user != null) {
                    req.setAttribute("form", user); // Đưa dữ liệu người dùng vào form
                } else {
                    message = "Người dùng không tồn tại.";
                }
            } else if (uri.contains("create")) { // Xử lý tạo mới người dùng
                BeanUtils.populate(user, req.getParameterMap());
                dao.create(user);
                message = "Thêm mới thành công!";
            } else if (uri.contains("update")) { // Xử lý cập nhật thông tin người dùng
                BeanUtils.populate(user, req.getParameterMap());
                dao.update(user);
                message = "Cập nhật thành công!";
            } else if (uri.contains("delete")) { // Xử lý xóa người dùng
                String idStr = req.getParameter("id");
                Integer id = Integer.parseInt(idStr);
                dao.remove(id);
                message = "Xóa thành công!";
            }
        } catch (Exception e) {
            message = "Lỗi: " + e.getMessage();
        }

        // Xử lý tìm kiếm người dùng
        List<User> users;
        String searchKeyword = req.getParameter("search");
        if (searchKeyword != null && !searchKeyword.trim().isEmpty()) {
            users = dao.findByKeyword(searchKeyword); // Tìm kiếm với từ khóa
        } else {
            users = dao.findAll(); // Lấy toàn bộ danh sách nếu không có từ khóa
        }

        // Gắn dữ liệu vào request để truyền tới JSP
        req.setAttribute("message", message);
        req.setAttribute("items", users);
        req.getRequestDispatcher("/views/user.jsp").forward(req, resp);
    }
}
