package com.poly.test;

import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.*;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.support.ui.*;
import org.testng.Assert;
import org.testng.annotations.*;

import java.io.FileOutputStream;
import java.io.IOException;
import java.time.Duration;

public class Accountregistertest{
    WebDriver driver;
    WebDriverWait wait;
    Workbook workbook;
    Sheet sheet;
    int rowNum = 1;

    @BeforeClass
    public void setupExcel() {
        workbook = new XSSFWorkbook();
        sheet = workbook.createSheet("Account Test");
        Row header = sheet.createRow(0);
        header.createCell(0).setCellValue("Username");
        header.createCell(1).setCellValue("Email");
        header.createCell(2).setCellValue("Expected");
        header.createCell(3).setCellValue("Actual");
    }

    @BeforeMethod
    public void setUp() {
        System.setProperty("webdriver.chrome.driver", "E:\\kiemthunancao\\chromedriver-win64\\chromedriver.exe");
        
        // Đảm bảo trình duyệt không chạy headless và đang mở giao diện
        ChromeOptions options = new ChromeOptions();
        
        driver = new ChromeDriver(options);
        
        wait = new WebDriverWait(driver, Duration.ofSeconds(7));
        driver.manage().window().maximize();
        driver.get("http://localhost:8080/admin/accounts/new");
    }

    @Test(dataProvider = "accountData")
    public void testAddAccount(String username, String password, String fullname, String email, String photo, boolean isAdmin, String expected) {
        String actualResult;

        try {
            WebElement usernameField = wait.until(ExpectedConditions.visibilityOfElementLocated(By.name("username")));
            WebElement passwordField = driver.findElement(By.name("password"));
            WebElement fullnameField = driver.findElement(By.name("fullname"));
            WebElement emailField = driver.findElement(By.name("email"));
            WebElement photoField = driver.findElement(By.name("photo"));
            WebElement activatedCheckbox = driver.findElement(By.name("activated"));
            WebElement adminCheckbox = driver.findElement(By.name("admin"));

            // Nhập dữ liệu vào các trường
            usernameField.clear();
            usernameField.sendKeys(username);
            passwordField.sendKeys(password);
            fullnameField.sendKeys(fullname);
            emailField.sendKeys(email);
            photoField.sendKeys(photo);

            // Checkbox "Admin" hoặc "Khách Hàng"
            if (isAdmin) {
                adminCheckbox.click();  // Click vào checkbox admin nếu là admin
            } else {
                activatedCheckbox.click();  // Click vào checkbox khách hàng nếu không phải admin
            }

            // Nhấn nút Lưu
            WebElement saveButton = driver.findElement(By.xpath("//button[contains(text(),'Lưu')]"));
            saveButton.click();

           
            Thread.sleep(5000); // Chờ trong 5 giây

            // Kiểm tra kết quả
            if (expected.equalsIgnoreCase("Đăng ký thành công")) {
                // Kiểm tra xem trang có chuyển hướng đến login.html không
                String currentUrl = driver.getCurrentUrl();
                Assert.assertTrue(currentUrl.contains("login"), "Chuyển hướng không thành công, URL hiện tại: " + currentUrl);
                actualResult = "Đăng ký thành công";
            } else {
                Assert.assertTrue(driver.getPageSource().contains(expected));
                actualResult = expected;
            }

        } catch (Exception e) {
            actualResult = "Error: " + e.getMessage();
        }

        // Ghi kết quả vào file Excel
        Row row = sheet.createRow(rowNum++);
        row.createCell(0).setCellValue(username);
        row.createCell(1).setCellValue(email);
        row.createCell(2).setCellValue(expected);
        row.createCell(3).setCellValue(actualResult);
    }


    @AfterClass
    public void saveExcel() throws IOException {
        try (FileOutputStream fileOut = new FileOutputStream("E:\\kiemthunancao\\AccountTestResults.xlsx")) {
            workbook.write(fileOut);
        }
        workbook.close();
    }

    @AfterMethod
    public void tearDown() {
        if (driver != null) {
            driver.quit();
        }
    }

    @DataProvider(name = "accountData")
    public Object[][] getAccountData() {
        return new Object[][] {
                // Test Case 1: Đăng ký thành công
                {"user01", "123456", "Nguyen Van A", "user01@gmail.com", "avatar.jpg", false, "Đăng ký thành công"},
                
                // Test Case 2: Bỏ trống họ và tên
                {"user02", "123456", "", "user02@gmail.com", "avatar.jpg", false, "Vui lòng nhập họ và tên"},
                
                // Test Case 3: Tên đăng nhập trống
                {"", "123456", "Nguyen Van B", "user03@gmail.com", "avatar.jpg", false, "Vui lòng nhập tên đăng nhập"},
                
                // Test Case 5: Mật khẩu trống
                {"user04", "", "Nguyen Van C", "user04@gmail.com", "avatar.jpg", false, "Vui lòng nhập mật khẩu"},
                
                // Test Case 7: Email có ký tự đặc biệt
                {"user05", "123456", "Nguyen Van D", "abc###%##$@gmail.com", "avatar.jpg", false, "Email không hợp lệ"},
                
                // Test Case 8: Email trống
                {"user06", "123456", "Nguyen Van E", "", "avatar.jpg", false, "Vui lòng nhập email"},
                
                // Test Case 9: Không tải ảnh đại diện
                {"user07", "123456", "Nguyen Van F", "user07@gmail.com", "", false, "Đăng ký thành công"}
        };
    }
}
